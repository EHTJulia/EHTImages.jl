var documenterSearchIndex = {"docs":
[{"location":"autodocstrings/","page":"All Docstrings","title":"All Docstrings","text":"CurrentModule = EHTImages","category":"page"},{"location":"autodocstrings/","page":"All Docstrings","title":"All Docstrings","text":"","category":"page"},{"location":"autodocstrings/","page":"All Docstrings","title":"All Docstrings","text":"Modules = [EHTImages]","category":"page"},{"location":"autodocstrings/#EHTImages.ehtimage_metadata_compat","page":"All Docstrings","title":"EHTImages.ehtimage_metadata_compat","text":"ehtimage_metadata_compat::NamedTuple\n\nA tuple of available values for some of keys in ehtimage_metadata_default.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ehtimage_metadata_default","page":"All Docstrings","title":"EHTImages.ehtimage_metadata_default","text":"ehtimage_metadata_default::NamedTuple\n\nA tuple for the default metadata keys and values for AbstractIntensityImage.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ehtimage_metadata_type","page":"All Docstrings","title":"EHTImages.ehtimage_metadata_type","text":"ehtimage_metadata_default::NamedTuple\n\nA tuple of types for metadata keys in ehtimage_metadata_default.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_defaultgroup","page":"All Docstrings","title":"EHTImages.ncd_intensity_defaultgroup","text":"ncd_intensity_defaultgroup::String\n\nDefault group name of the EHT Intensity Image NetCDF4 format.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_dimnames","page":"All Docstrings","title":"EHTImages.ncd_intensity_dimnames","text":"ncd_intensity_dimnames::NamedTuple\n\nA named tuple relating Symbols to actual strings for the dimension of the EHT Intensity Image NetCDF4 format. keys are :x, :y for x and y axis, :p for polarization, :f for frequency, :t for time.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_metadata_typeconv","page":"All Docstrings","title":"EHTImages.ncd_intensity_metadata_typeconv","text":"ncd_intensity_metadata_typeconv::NamedTuple\n\nA named tuple relating Symbols to types of the corresponding variables of the EHT Intensity Image NetCDF4 format.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_vardims","page":"All Docstrings","title":"EHTImages.ncd_intensity_vardims","text":"ncd_intensity_vartypes::NamedTuple\n\nA named tuple relating Symbols to types of the corresponding variables of the EHT Intensity Image NetCDF4 format.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_varnames","page":"All Docstrings","title":"EHTImages.ncd_intensity_varnames","text":"ncd_intensity_varnames::NamedTuple\n\nA named tuple relating Symbols to names of the corresponding variables of the EHT Intensity Image NetCDF4 format.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.ncd_intensity_vartypes","page":"All Docstrings","title":"EHTImages.ncd_intensity_vartypes","text":"ncd_intensity_vartypes::NamedTuple\n\nA named tuple relating Symbols to types of the corresponding variables of the EHT Intensity Image NetCDF4 format.\n\n\n\n\n\n","category":"constant"},{"location":"autodocstrings/#EHTImages.AbstractImageDataSet","page":"All Docstrings","title":"EHTImages.AbstractImageDataSet","text":"abstract type AbstractImageDataSet\n\nThe abstract type for image data sets handled in this module. AbstractImageDataSet works as an Abstract Array-ish. To make it, each image type needs to have four following methods. (see: Julia Documentation for \"Interfaces\")\n\nMandatory Methods that need to be defined\n\ndefault_metadata:   Return the default metadata for the image data set.\nisdiskdata:    Determines whether the data is disk-based or memory-based.   Return IsDiskData() if data is disk-based,   while return NotDiskData() if data is memory-based.\nisopen:   Check if data is accessible, return true for accessible data   and false if data is not accessible. This is relevant if   image is based on disk data.\niswritable:   Check if data is accessible, return true for accessible data   and false if data is not accessible. This is relevant if   image is based on disk data.\n\nMethods provided\n\nsize: returning a tuple containing the dimension of AbstractImageDataSet.data\ngetindex: scalar or vector indexing\nsetindex!: scalar or vector indexing assignment\nfirstindex: returning the first index, used in X[begin]\nlastindex: returning the last index, used in X[end]\nIndexStyle: returning the index style\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.AbstractIntensityImage","page":"All Docstrings","title":"EHTImages.AbstractIntensityImage","text":"abstract type AbstractIntensityImage <: AbstractImageDataSet\n\nThis defines a basic interface for intensity images. It is a subtype of AbstractImageDataSet.\n\nMandatory fields\n\ndata: 5 dimensional array for intensity [x, y, polarization, frequency, time]\np: 1 dimensional array for polarization codes in string (coordinate for polarization axis)\nf: 1 dimensional array for frequency in Hz (coordinate for frequency axis)\nt: 1 dimensional array for time in modified Julian dates (coordinate for time axis)\nmetadata: Dict-like object to stock metadata\n\nMandatory methods need to be defined.\n\nSee also documentations for AbstractImageDataSet.\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.DataStorageType","page":"All Docstrings","title":"EHTImages.DataStorageType","text":"abstract type DataStorageType\n\nInternal type for specifying the nature of the location of data.\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.DiskIntensityImage","page":"All Docstrings","title":"EHTImages.DiskIntensityImage","text":"mutable struct DiskIntensityImage <: AbstractIntensityImage\n\nA data type for five dimensional images of which data are all stored in disk using the NetCDF4 format. This format relies on NCDatasets to provide an easy access of data through many useful methods in the NCDatasets package. Note that this data type could be either mutable or immutable depending on the access mode to the NetCDF4 file.\n\nfilename::Any: name of the corresponding NetCDF4 file Default: nothing\ngroup::Any: group name of the corresponding image data set Default: nothing\ndata::Any: five dimensional intensity disbrituion. Default: nothing\nmetadata::Any: metadata. Default: nothing\nt::Any: polarization code, giving the parization axis (:p). Default: nothing\nf::Any: central frequency in Hz, giving the frequency axis (:f). Default: nothing\np::Any: central modified Julian date, giving the time axis (:t). Default: nothing\ndataset::Any: Default: nothing\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.IntensityImage","page":"All Docstrings","title":"EHTImages.IntensityImage","text":"struct IntensityImage <: AbstractIntensityImage\n\nA data type for five dimensional images of which data are all stored in the memory. This format relies on EHTDimensionalData.DimArray to provide an easy access of data through many useful methods in EHTDimensionalData and its origin DimensionalData packages. Note that this data type is immutable.\n\ndimstack::DimensionalData.DimStack: DimArray storing all of data, p, f, t and metadata.\ndata::Array{Float64, 5}: the five dimensional intensity disbrituion. Alias to dimstack.intensity.data.\nmetadata::OrderedCollections.OrderedDict{Symbol, Any}: metadata. Aliast to dimarray.metadata.\np::Vector{String}: the polarization code, giving the polarization axis (:p) of dimarray. Alias to dimarray.dims[3].val.data.\nf::Vector{Float64}: the central frequency in Hz, giving the frequency axis (:f) of dimarray. Alias to dimarray.dims[4].val.data.\nt::Vector{Float64}: the central modified Julian date, giving the time axis (:t) of dimarray. Alias to dimarray.dims[5].val.data.\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.IsDiskData","page":"All Docstrings","title":"EHTImages.IsDiskData","text":"struct IsDiskData <: EHTImages.DataStorageType\n\nDefines a trait that a states that data is disk based.\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#EHTImages.NotDiskData","page":"All Docstrings","title":"EHTImages.NotDiskData","text":"struct NotDiskData <: EHTImages.DataStorageType\n\nDefines a trait that a states that data is memory based.\n\n\n\n\n\n","category":"type"},{"location":"autodocstrings/#Base.close-Tuple{DiskIntensityImage}","page":"All Docstrings","title":"Base.close","text":"close(image::DiskIntensityImage)\n\nClose the access to the associated NetCDF4 file. This function is an alias to close!(image).\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#Base.isopen-Tuple{AbstractImageDataSet}","page":"All Docstrings","title":"Base.isopen","text":"isopen(_::AbstractImageDataSet) -> Bool\n\n\nCheck if data is accessible, return true for accessible data and false if data is not accessible. This is relevant if image is based on disk data.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#Base.iswritable-Tuple{AbstractImageDataSet}","page":"All Docstrings","title":"Base.iswritable","text":"iswritable(_::AbstractImageDataSet) -> Bool\n\n\nCheck if data is accessible, return true for accessible data and false if data is not accessible. This is relevant if image is based on disk data.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.close!-Tuple{DiskIntensityImage}","page":"All Docstrings","title":"EHTImages.close!","text":"close!(image::DiskIntensityImage)\n\nClose the access to the associated NetCDF4 file.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.convolve!-Tuple{AbstractIntensityImage, EHTModels.AbstractModel}","page":"All Docstrings","title":"EHTImages.convolve!","text":"convolve!(\n    image::AbstractIntensityImage,\n    model::EHTModels.AbstractModel;\n    ex\n)\n\n\nConvolve the input image with a given model.\n\nArguments\n\nimage::AbstractIntensityImage:  The input image. It must be not disk-based.\nmodel::EHTModels.AbstractModel:  The model to be used as the convolution kernel.\nex=SequentialEx()   An executor of FLoops.jl.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.convolve-Tuple{AbstractIntensityImage, EHTModels.AbstractModel}","page":"All Docstrings","title":"EHTImages.convolve","text":"convolve(\n    image::AbstractIntensityImage,\n    model::EHTModels.AbstractModel;\n    ex\n) -> AbstractIntensityImage\n\n\n-> AbstractIntensityImage\n\nConvolve the input image with a given model, and return the convolved image.\n\nArguments\n\nimage::AbstractIntensityImage:  The input image. It must be not disk-based.\nmodel::EHTModels.AbstractModel:  The model to be used as the convolution kernel.\nex=SequentialEx()   An executor of FLoops.jl.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.convolve_base!-Tuple{AbstractIntensityImage, EHTModels.AbstractModel}","page":"All Docstrings","title":"EHTImages.convolve_base!","text":"convolve_base!(\n    image::AbstractIntensityImage,\n    model::EHTModels.AbstractModel;\n    ex\n) -> Any\n\n\nBase function for convolving the input image with a given model.\n\nArguments\n\nimage::AbstractIntensityImage:  The input image. It must be not disk-based.\nmodel::EHTModels.AbstractModel:  The model to be used as the convolution kernel.\nex=SequentialEx()   An executor of FLoops.jl.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.copy_metadata!-Tuple{AbstractIntensityImage, EHTUVData.AbstractUVDataSet}","page":"All Docstrings","title":"EHTImages.copy_metadata!","text":"copy_metadata!(image::AbstractIntensityImage, uvdataset::AbstractUVDataSet)\n\ncopy metadata from the given uvdataset.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.default_metadata-Tuple{Type{<:AbstractImageDataSet}}","page":"All Docstrings","title":"EHTImages.default_metadata","text":"default_metadata(::Type{<:AbstractImageDataSet}) -> OrderedDict{Symbol, Any}\ndefault_metadata(::AbstractImageDataSet) -> OrderedDict{Symbol, Any}\n\nReturn default metadata for the image data set.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.default_metadata-Tuple{Type{<:AbstractIntensityImage}}","page":"All Docstrings","title":"EHTImages.default_metadata","text":"default_metadata(dataset) -> OrderedDict\n\nReturn the default metadata of the given dataset.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.define_ncd_intensity_dimensions!","page":"All Docstrings","title":"EHTImages.define_ncd_intensity_dimensions!","text":"define_ncd_intensity_dimensions!(ncd[, nx, ny, np, nf, nt])\n\nDefine NetCDF4 dimensions based on the given size of the image data.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.define_ncd_intensity_variables!-Tuple{Any}","page":"All Docstrings","title":"EHTImages.define_ncd_intensity_variables!","text":"define_ncd_intensity_variables!(ncd)\n\nDefine NetCDF4 variables based on EHT NetCDF4 Image Format.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.diskintensityimage-Tuple{AbstractString, Integer, Real, Union{String, Unitful.Quantity, Unitful.Units}}","page":"All Docstrings","title":"EHTImages.diskintensityimage","text":"diskintensityimage(filename, nx, dx, angunit; keywords) -> DiskIntensityImage\n\nCreate a blank DiskIntensityImage object. Return DiskIntensityImage data loaded with :read mode.\n\nArguments\n\nfilename::AbstractString:   NetCDF4 file where image data will be created.\nnx::Integer:   the number of pixels along with the horizontal axis. Must be positive.\ndx::Real:   the pixel size of the horizontal axis. Must be positive.\nangunit::Union{Unitful.Quantity, Unitful.Units or String}=rad:   the angular unit for dx and dy.\n\nKeywords\n\nny::Real=nx:   the number of pixels along with the vertical axis. Must be positive.\ndy::Real=dx:   the pixel size of the vertical axis. Must be positive.\nixref::Real=(nx + 1) / 2, iyref::Real=(ny + 1) / 2:   index of the reference pixels along with the horizontal and vertical   axises, respectively. Default values set to the center of the field   of the view.\npol::Symbol=:single:   number of polarizations. Availables are :single or :full (i.e. four)   polarizations.\nfreq::Vector{Float64}=[1.0]:   a vector for frequencies in the unit of Hz\nmjd::Vector{Float64}=[0.0]:   a vector for time in the unit of MJD.\nmetadata::AbstractDict=default_metadata(AbstractIntensityImage):   other metadata. Note that the above keywords and arguments will overwrite   the values of the conflicting keys in this metadata argument.\nmode::Symbol=:create:   The access mode to NCDataset.   Available modes are :read, :append, :create.   See help for EHTNCDBase.ncdmodes for details.\ngroup::AbstractString=EHTImage.ncd_intensity_defaultgroup:   The group of the image data in the input NetCDF4 file.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.get_bconv-Tuple{AbstractIntensityImage}","page":"All Docstrings","title":"EHTImages.get_bconv","text":"get_bconv\n\nget a conversion factor from Jy/pixel (used in AbstractIntensityImage.data) to an arbitrary unit for the intensity. fluxunit is for the unit of the flux density (e.g. Jy, mJy, μJy) or brightness temperture (e.g. K), while saunit is for the unit of the solid angle (pixel, beam, mas, μJy).\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.get_uvgrid","page":"All Docstrings","title":"EHTImages.get_uvgrid","text":"get_uvgrid(metadata, dofftshift=true)\n\nreturning u and v grids corresponding to the image field of view and pixel size.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.get_uvgrid-2","page":"All Docstrings","title":"EHTImages.get_uvgrid","text":"get_uvgrid(image, dofftshift=true)\n\nreturning u and v grids corresponding to the image field of view and pixel size.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.get_xygrid","page":"All Docstrings","title":"EHTImages.get_xygrid","text":"get_xygrid\n\nReturning 1-dimensional StepRange objects for the grids along with x and y axis in the given angular unit specified by angunit.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.get_xygrid-2","page":"All Docstrings","title":"EHTImages.get_xygrid","text":"get_xygrid --> Tuple{StepRangeLen, StepRangeLen}\n\nReturning 1-dimensional StepRangeLen objects for the grids along with x and y axis in the given angular unit specified by angunit.\n\nArguments\n\nmetadata::Dict{Symbol, Any}-like: Input dictionary.\nangunit::Union{Unitful.Quantity,Unitful.Units,String}=rad: Angular units of the output pixel grids.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.intensityimage-Tuple{Integer, Real, Union{String, Unitful.Quantity, Unitful.Units}}","page":"All Docstrings","title":"EHTImages.intensityimage","text":"intensityimage(nx, dx, angunit; keywords) -> IntensityImage\n\nCreate and return a blank IntensityImage object.\n\nArguments\n\nnx::Integer:   the number of pixels along with the horizontal axis. Must be positive.\ndx::Real:   the pixel size of the horizontal axis. Must be positive.\nangunit::Union{Unitful.Quantity, Unitful.Units or String}=rad:   the angular unit for dx and dy.\n\nKeywords\n\nny::Real=nx:   the number of pixels along with the vertical axis. Must be positive.\ndy::Real=dx:   the pixel size of the vertical axis. Must be positive.\nixref::Real=(nx + 1) / 2, iyref::Real=(ny + 1) / 2:   index of the reference pixels along with the horizontal and vertical   axises, respectively. Default values set to the center of the field   of the view.\np::Symbol=:single:   number of parizations. Availables are :single or :full (i.e. four)   parizations.\nf::Vector{Float64}=[1.0]:   a vector for fuencies in the unit of Hz\nt::Vector{Float64}=[0.0]:   a vector for time in the unit of t.\nmetadata::AbstractDict=default_metadata(AbstractIntensityImage):   other metadata. Note that the above keywords and arguments will overwrite   the values of the conflicting keys in this metadata argument.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.isdiskdata-Tuple{AbstractImageDataSet}","page":"All Docstrings","title":"EHTImages.isdiskdata","text":"isdiskdata(_::AbstractImageDataSet) -> EHTImages.IsDiskData\n\n\nDetermines whether the data is disk-based or memory-based. Return IsDiskData() if data is disk-based, while return NotDiskData() if data is memory-based.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.load-Tuple{DiskIntensityImage}","page":"All Docstrings","title":"EHTImages.load","text":"load(image::NCImage) --> DDImage\n\nLoad image data from the input disk image to memory.\n\nArguments\n\nimage::NCImage: Input NCImage.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.load_fits","page":"All Docstrings","title":"EHTImages.load_fits","text":"load_fits(filename::AbstractString, hduid::Integer=1) -> IntensityImage\nload_fits(fits::FITS, hduid::Integer=1) -> IntensityImage\nload_fits(hdu::ImageHDU) -> IntensityImage\n\nLoad the input FITS image into IntensityImage (in-memory image data).\n\nArguments\n\nfilename::AbstractString: name of the input FITS file\nhduid::Integer=1: ID of the HDU to be loaded. Default to the primary HDU.\nhdu::ImageHDU: HDU to be loaded.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.load_image-Tuple{AbstractString}","page":"All Docstrings","title":"EHTImages.load_image","text":"load_image(filename; [group, mode]) -> DiskIntensityImage\n\nLoad image data from the specified group in the given NetCDF4 file with the specified access mode.\n\nArguments\n\nfilename::AbstractString:   The input NetCDF4 file.\ngroup::AbstractString=EHTImage.ncd_intensity_defaultgroup   The group of the image data in the input NetCDF4 file.\nmode::Symbol=:read:   The access mode to NCDataset.   Available modes are :read, :append, :create.   See help for EHTImage.ncdmodes for details.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.open!","page":"All Docstrings","title":"EHTImages.open!","text":"open!(image[, mode])\n\nLoad image data from NCDataset specified in the input image object with the given access mode. If image data are already opened, it will close it and reload data again.\n\nArguments\n\nimage::DiskIntensityImage:   The input image object.\nmode::Symbol=:read:   The access mode to NCDataset.   Available modes are :read, :append, :create.   See help for EHTImage.ncdmodes for details.\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.save_fits!","page":"All Docstrings","title":"EHTImages.save_fits!","text":"save_fits[!](image::AbstractIntensityImage, filename::AbstractString, idx=(1, 1); fitstype::Symbol=:casa)\n\nSaving the image into a FITS file in a specifed format.\n\nArguments\n\nimage::AbstractIntensityImage: the input image\nfilename::AbstractString: the name of the output FITS file\nidx: the index of the saved image. Should be (frequency index, time index). Default to (1,1).\n\nKeywords\n\nfitstype::Symbol: the format type of the output FITS. Availables are :casa (CASA compatible).\n\n\n\n\n\n","category":"function"},{"location":"autodocstrings/#EHTImages.save_netcdf!-Tuple{AbstractIntensityImage, AbstractString}","page":"All Docstrings","title":"EHTImages.save_netcdf!","text":"save_netcdf!(image, filename; [mode, group])\n\nSave image data to NetCDF4 format.\n\nArguments\n\nimage::AbstractIntensityImage   Input image data\nfilename::AbstractString:   NetCDF4 file where image data will be saved.\nmode::Symbol=:create:   The access mode to NCDataset.   Available modes are :read, :append, :create.   See help for EHTNCDBase.ncdmodes for details.\ngroup::AbstractString=EHTImage.ncd_intensity_defaultgroup:   The group of the image data in the input NetCDF4 file.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.save_netcdf-Tuple{AbstractIntensityImage, AbstractString}","page":"All Docstrings","title":"EHTImages.save_netcdf","text":"save_netcdf(image, filename; [mode=:create, group=\"image\"]) => DiskIntensityImage\n\nSave image data to NetCDF4 format. Saved data will be loaded and returned with :read access mode.\n\nArguments\n\nimage::AbstractIntensityImage   Input image data\nfilename::AbstractString:   NetCDF4 file where image data will be saved.\nmode::Symbol=:create:   The access mode to NCDataset.   Available modes are :read, :append, :create.   See help for EHTNCDBase.ncdmodes for details.\ngroup::AbstractString=EHTImage.ncd_intensity_defaultgroup:   The group of the image data in the input NetCDF4 file.\n\n\n\n\n\n","category":"method"},{"location":"autodocstrings/#EHTImages.set_ncd_intensity_metadata!-Tuple{Any, Any}","page":"All Docstrings","title":"EHTImages.set_ncd_intensity_metadata!","text":"set_ncd_intensity_metadata!(ncd)\n\nSet NetCDF4 metadata based on EHT NetCDF4 Image Format.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EHTImages","category":"page"},{"location":"#EHTImages.jl","page":"Home","title":"EHTImages.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module provides data types and implements basic functions to handle five-dimensional astronomical images for radio interferometry. The module aims to provide the following features, meeting the needs for multi-dimensional high-resolution imaging, particularly for Very Long Baseline Interferometry (e.g., Event Horizon Telescope) and millimeter interferometry (e.g., ALMA) in the regime of narrow field of views.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package currently implements:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Provides abstract types and methods to handle both in-memory and disk-based image cubes.\nOffers native support for five-dimensional images (x, y, frequency, polarization, time) in a self-descriptive data format.\nSupports non-equidistant grid in time for the application of dynamic imaging methods (e.g., Johnson et al., 2017, Bouman et al., 2017).\nSupports non-equidistant grid in frequency for the application of multi-frequency imaging methods (e.g., Chael et al., 2023).\nSupports both in-memory and disk-based (lazily-loaded) image files.\nIn-memory data is stored in a self-descriptive data type powered by EHTDimensionalData.jl (an extension of the powerful DimensionalData.jl).\nDisk-based data is based on NetCDF (on HDF5) accessed by NCDatasets.jl, allowing lazy access to data suitable for a large image cube that may not fit into memory and also for containing multiple image data sets inside a single file.\nIncludes a FITS writer and loader compatible with the eht-imaging library (Chael et al., 2016, 2018) and SMILI (Akiyama et al., 2017a, b) for the EHT community, as well as with more traditional packages including AIPS, DIFMAP, and CASA software packages.\nProvides interactive plotting tools powered by PythonPlot.jl.\nOffers interactive tools to analyze, edit, and transform images using pure Julia native functions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Assuming that you already have Julia correctly installed, it suffices to import EHTImages.jl in the standard way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"EHTImages\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"EHTImages.jl relies on PythonPlot.jl for image visualization. You can utilize a custom set of perceptually uniform colormaps implemented in the Python library ehtplot, which has been utilized in publications by the EHT Collaboration. To use these colormaps, follow the steps below to install ehtplot via CondaPkg.jl and import it using PythonCall.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Install CondaPkg.jl and PythonCall.jl (only needs to be executed once in your local/global Julia environment)\nusing Pkg\nPkg.add(\"CondaPkg\")\nPkg.add(\"PythonCall\")\n\n# Install ehtplot (also only needs to be executed once in your local/global Julia environment)\nusing CondaPkg\nCondaPkg.add_pip(\"ehtplot\", version=\"@git+https://github.com/liamedeiros/ehtplot\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"After installing ehtplot, you can import and utilize it for image visualization in EHTImages.jl. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# When you want to use ehtplot\nusing EHTImages\nusing PythonCall  # provides the `pyimport` function\nehtplot = pyimport(\"ehtplot\")\n\n# Plot using the `afmhot_us` colormap in ehtplot.\nimshow(::yourimage, colormap=\"afmhot_us\", ...)","category":"page"},{"location":"#What-if-you-don't-find-a-feature-you-want?","page":"Home","title":"What if you don't find a feature you want?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We are prioritizing to implement features needed for the image analysis conducted in the EHT and ngEHT Collaborations. Nevertheless, your feedback is really helpful to make the package widely useful for the broad community. Please request a feature in the GitHub's issue page.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this package has been finantially supported by the following programs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AST-2107681, National Science Foundation, USA: v0.1.5 - present\nAST-2034306, National Science Foundation, USA: v0.1.5 - present\nOMA-2029670, National Science Foundation, USA: v0.1.5 - present\nAST-1935980, National Science Foundation, USA: v0.1.5 - present\nALMA North American Development Study Cycle 8, National Radio Astronomy Observatory, USA: v0.1.0 - v0.1.4\nThe National Radio Astronomy Observatory is a facility of the National Science Foundation operated under cooperative agreement by Associated Universities, Inc.","category":"page"}]
}
